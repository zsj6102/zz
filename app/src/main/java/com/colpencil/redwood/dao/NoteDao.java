package com.colpencil.redwood.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NOTE.
*/
public class NoteDao extends AbstractDao<Note, Long> {

    public static final String TABLENAME = "NOTE";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ote_id = new Property(1, Integer.class, "ote_id", false, "OTE_ID");
        public final static Property Ote_title = new Property(2, String.class, "ote_title", false, "OTE_TITLE");
        public final static Property Ote_content = new Property(3, String.class, "ote_content", false, "OTE_CONTENT");
        public final static Property Createtime = new Property(4, Long.class, "createtime", false, "CREATETIME");
        public final static Property SystemTime = new Property(5, Long.class, "systemTime", false, "SYSTEM_TIME");
        public final static Property Url = new Property(6, String.class, "url", false, "URL");
        public final static Property Nickname = new Property(7, String.class, "nickname", false, "NICKNAME");
        public final static Property Face = new Property(8, String.class, "face", false, "FACE");
        public final static Property Com_count = new Property(9, Integer.class, "com_count", false, "COM_COUNT");
        public final static Property Like_count = new Property(10, Integer.class, "like_count", false, "LIKE_COUNT");
        public final static Property Sec_id = new Property(11, Integer.class, "sec_id", false, "SEC_ID");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OTE_ID' INTEGER," + // 1: ote_id
                "'OTE_TITLE' TEXT," + // 2: ote_title
                "'OTE_CONTENT' TEXT," + // 3: ote_content
                "'CREATETIME' INTEGER," + // 4: createtime
                "'SYSTEM_TIME' INTEGER," + // 5: systemTime
                "'URL' TEXT," + // 6: url
                "'NICKNAME' TEXT," + // 7: nickname
                "'FACE' TEXT," + // 8: face
                "'COM_COUNT' INTEGER," + // 9: com_count
                "'LIKE_COUNT' INTEGER," + // 10: like_count
                "'SEC_ID' INTEGER);"); // 11: sec_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer ote_id = entity.getOte_id();
        if (ote_id != null) {
            stmt.bindLong(2, ote_id);
        }
 
        String ote_title = entity.getOte_title();
        if (ote_title != null) {
            stmt.bindString(3, ote_title);
        }
 
        String ote_content = entity.getOte_content();
        if (ote_content != null) {
            stmt.bindString(4, ote_content);
        }
 
        Long createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(5, createtime);
        }
 
        Long systemTime = entity.getSystemTime();
        if (systemTime != null) {
            stmt.bindLong(6, systemTime);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(7, url);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(8, nickname);
        }
 
        String face = entity.getFace();
        if (face != null) {
            stmt.bindString(9, face);
        }
 
        Integer com_count = entity.getCom_count();
        if (com_count != null) {
            stmt.bindLong(10, com_count);
        }
 
        Integer like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindLong(11, like_count);
        }
 
        Integer sec_id = entity.getSec_id();
        if (sec_id != null) {
            stmt.bindLong(12, sec_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ote_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ote_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ote_content
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // createtime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // systemTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // face
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // com_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // like_count
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // sec_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOte_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOte_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOte_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreatetime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setSystemTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFace(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCom_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setLike_count(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setSec_id(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Note entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Note entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
